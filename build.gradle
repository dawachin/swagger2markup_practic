buildscript {
	ext {
		springBootVersion = '1.5.9.RELEASE'
	}
	repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
        maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.10.1'
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'io.github.swagger2markup:swagger2markup-spring-restdocs-ext:1.2.0'
        classpath 'io.github.swagger2markup:swagger2markup-gradle-plugin:1.2.0'
        classpath "org.ajoberstar:gradle-git:1.5.1"
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'io.github.swagger2markup'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.ajoberstar.github-pages'
apply plugin: "com.github.hierynomus.license"

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

tasks.withType(JavaCompile) {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
    options.deprecation = true
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked"
}

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    mavenLocal()
}

ext {
	asciiDocOutputDir = file("${buildDir}/asciidoc/generated")
	swaggerOutputDir = file("${buildDir}/swagger")
	snippetsOutputDir = file("${buildDir}/asciidoc/snippets")
	springfoxVersion = '2.5.0'
}

dependencies {
    if (file('repository').exists()) {
        compile fileTree(dir: 'repository', include: '*.jar')
    } else {
        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'io.swagger:swagger-annotations:1.5.6'
        compile "io.springfox:springfox-swagger2:2.5.0"
        compile "io.springfox:springfox-bean-validators:2.5.0"
        compile 'io.springfox:springfox-swagger-ui:2.5.0'
        compile 'com.google.guava:guava:18.0'
        compile 'net.logstash.logback:logstash-logback-encoder:4.5.1'
        compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.6.5"
        compile "com.fasterxml.jackson.module:jackson-module-afterburner:2.6.5"
        compileOnly('org.projectlombok:lombok')
        testCompile "io.springfox:springfox-swagger2:${springfoxVersion}"
        testCompile "io.springfox:springfox-bean-validators:${springfoxVersion}"
        testCompile('org.springframework.boot:spring-boot-starter-test')
        testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
        testCompile 'junit:junit'
        testCompile 'com.fasterxml.jackson.module:jackson-module-jsonSchema:2.6.5'
    }
}

test {
	systemProperty 'io.springfox.staticdocs.outputDir', swaggerOutputDir
	systemProperty 'io.springfox.staticdocs.snippetsOutputDir', snippetsOutputDir
}

convertSwagger2markup {
	dependsOn test
	swaggerInput "${swaggerOutputDir}/swagger.json"
	outputDir asciiDocOutputDir
	config = [
			'swagger2markup.extensions.springRestDocs.snippetBaseUri': snippetsOutputDir.getAbsolutePath()]
}

asciidoctor {
	dependsOn convertSwagger2markup
	sources {
		include 'index.adoc'
	}
	backends = ['html5', 'pdf']
	attributes = [
			doctype: 'book',
			toc: 'left',
			toclevels: '2',
			numbered: '',
			sectlinks: '',
			sectanchors: '',
			hardbreaks: '',
			generated: asciiDocOutputDir
	]
}

publishGhPages.dependsOn asciidoctor

jar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
    from ("${asciidoctor.outputDir}/pdf") {
        into 'static/docs'
    }
}

task releaseSource(type: Zip) {
    doFirst {
        // get gradle.bin.zip for offline build.
        ant.mkdir(dir: "${projectDir}/build/offline")
        def p = new Properties()
        p.load(new FileInputStream(new File("${projectDir}/gradle/wrapper/gradle-wrapper.properties")))
        def gradleUrl = p.get('distributionUrl')
        //ant.get(src: gradleUrl, dest: "${projectDir}/build/offline")

        // edit properties for offline build.
        ant.copy(todir: "${projectDir}/build/offline",
                overwrite: true,
                preservelastmodified: true) {
            fileset (file: 'gradle/wrapper/gradle-wrapper.properties')
        }
        ant.replaceregexp (file: "${projectDir}/build/offline/gradle-wrapper.properties",
                match: "(distributionUrl)=.*", flags: 'g',
                replace: "\\1=../../repository/${gradleUrl.substring(gradleUrl.lastIndexOf('/') + 1, gradleUrl.size())}")
    }

    classifier = 'sources'
    from(projectDir) {
        exclude '.git'
        exclude '.gradle'
        exclude '.settings'
        exclude 'bin'
        exclude 'build'
    }
    into('repository') {
        from configurations.testCompile
        from("${projectDir}/build/offline") {
            include '*.zip'
        }
    }
    into('gradle/wrapper') {
        from "${projectDir}/build/offline/gradle-wrapper.properties"
    }
}

task wrapper(type:Wrapper)